import Helpers from './helpers';
import type { AudioOptions, EQBand, Song } from './types';
import { PlayerState } from "./state";
import { AudioMotionAnalyzer } from "./audiomotion-analyzer";
export default class AudioNode<S extends Song> {
    _audioElement: HTMLAudioElement;
    state: PlayerState;
    duration: number;
    currentTime: number;
    volume: number;
    isFading: boolean;
    context: AudioContext | null;
    motion: AudioMotionAnalyzer | null;
    protected options: AudioOptions;
    protected parent: Helpers<S>;
    protected fadeDuration: number;
    protected prefetchLeeway: number;
    protected crossFadeSteps: number;
    protected fadeOutVolume: number;
    protected fadeInVolume: number;
    protected hasNextQueued: boolean;
    protected repeat: 'off' | 'one' | 'all';
    protected isTv: boolean;
    protected bands: EQBand[];
    _preGain: GainNode | null;
    _filters: BiquadFilterNode[];
    _panner: StereoPannerNode | null;
    constructor(options: AudioOptions, parent: Helpers<S>);
    dispose(): void;
    setSource(src: string): this;
    play(): Promise<void>;
    pause(): void;
    stop(): void;
    setVolume(volume: number): void;
    fadeVolume(volume: number): void;
    getVolume(): number;
    mute(): void;
    unmute(): void;
    isPlaying(): boolean;
    getDuration(): number;
    getCurrentTime(): number;
    getBuffer(): number;
    getPlaybackRate(): number;
    setCurrentTime(time: number): this;
    getAudioElement(): HTMLAudioElement;
    getTimeData(): {
        position: number;
        duration: number;
        remaining: number;
        buffered: number;
        percentage: number;
    };
    setCrossFadeSteps(steps: number): void;
    _fadeIn(firstRun?: boolean): void;
    _fadeOut(firstRun?: boolean): void;
    setRepeating(repeat: 'off' | 'one' | 'all'): void;
    protected _initialize(): void;
    protected _createAudioElement(id: number): this;
    private playEvent;
    private pauseEvent;
    private endedEvent;
    private errorEvent;
    private waitingEvent;
    private canplayEvent;
    private loadedmetadataEvent;
    private loadstartEvent;
    private timeupdateEvent;
    private durationchangeEvent;
    private volumechangeEvent;
    private seekedEvent;
    private _addEvents;
    private _removeEvents;
    private createFilter;
    private _initializeContext;
}
